__TOC__

In this exercise, you will learn how to slice your OpenFlow network and have each slice controlled by a separate controller. In the process, you will also learn the concept of flowspaces and how the centralized visibility and “layerless-ness” of OpenFlow enables flexible slicing.

For this exercise we will use an open source tool called the FlowVisor.

==FlowVisor==

* FlowVisor is a special purpose OpenFlow controller that acts as a transparent proxy between OpenFlow switches and multiple OpenFlow controllers.
* FlowVisor creates rich slices of network resources and delegates control of each slice to a different controller. Slices can be defined by any combination of switch ports (layer 1), src/dst ethernet address or type (layer 2), src/dst IP address or type (layer 3), and src/dst TCP/UDP port or ICMP code/type (layer 4).
* FlowVisor enforces isolation between each slice, i.e., one slice cannot control another's traffic.

You can find more information about FlowVisor and source code at: [[http://www.flowvisor.org]]

==Exercise Topology==

[[images/flowvisor_topo.png]]

In this exercise we will slice a wide-area network (WAN) in two different ways. The WAN shown in the figure above connects two sites. For simplicity, we’ll have each site represented by a single OpenFlow switch, s1 and s4, respectively. The sites, s1 and s4, have two paths between them: 
* a low bandwidth, low latency path via switch s2
* a high bandwidth, high latency path via switch s3

s1 has two hosts attached: h1 and h2. s2 has two hosts attached: h3 and h4.

==Environment Setup==

===Part1: Mininet Setup===

Before starting, we need to create the topology and make sure that it works. Open the file <tt>~/onstutorial/flowvisor_scripts/flowvisor_topo.py</tt>. This file contains the python code to create the topology below in mininet. Go ahead and run mininet with the following command: 
 sudo mn --custom ~/onstutorial/flowvisor_scripts/flowvisor_topo.py --topo fvtopo --link tc --controller remote --mac --arp

This will create a network in mininet with the WAN topology. To keep things simple, we have set static ARP entries in the mininet hosts.

===Part 2: FlowVisor Setup===

Next we will start FlowVisor and make sure that all the OpenFlow switches we just created connect to it. Start FlowVisor with the following command: 
 sudo /etc/init.d/flowvisor start
Ensure that FlowVisor is running by getting its configuration:
 fvctl -f /dev/null get-config
If FlowVisor is running, you will see the FlowVisor configuration in JSON format like this:
<dl><dd><pre>
mininet@mininet:~$ fvctl -f /dev/null get-config
{
  "enable-topo-ctrl": true, 
  "flood-perm": {
    "dpid": "all", 
    "slice-name": "fvadmin"
  }, 
  "flow-stats-cache": 30, 
  "flowmod-limit": {
    "fvadmin": {
      "00:00:00:00:00:00:00:01": -1, 
      "00:00:00:00:00:00:00:02": -1, 
      "00:00:00:00:00:00:00:03": -1, 
      "00:00:00:00:00:00:00:04": -1, 
      "any": null
    }
  }, 
  "stats-desc": false, 
  "track-flows": false
}
</pre></dd></dl>

<tt>fvctl</tt> is a command-line utility to manage flowvisor. The <tt>-f</tt> argument points to a password file. Your FlowVisor is configured to be passwordless, therefore the password file is <tt>/dev/null</tt>.


List the existing slices using the following command:
 fvctl -f /dev/null list-slices
Ensure that the only slice is the default <tt>fvadmin</tt> slice. The output should look like this:
<dl><dd><pre>
mininet@mininet:~$ fvctl -f /dev/null list-slices
Configured slices:
fvadmin         --> enabled 
</pre></dd></dl>

List the existing slices using the following command:
 fvctl -f /dev/null list-flowspace
Ensure that there are no existing flowspaces. The output should look like this:
<dl><dd><pre>
mininet@mininet:~$  fvctl -f /dev/null list-flowspace
Configured Flow entries:
  None
</pre></dd></dl>

Ensure that all the switches have connected by running the following command:
 fvctl -f /dev/null list-datapaths
You might have to wait for a few seconds for the switches to connect before running the command. If all the
switches are connected, you should see an output like this:

<dl><dd><pre>
mininet@mininet:~$ fvctl -f /dev/null list-datapaths
Connected switches: 
  1 : 00:00:00:00:00:00:00:01
  2 : 00:00:00:00:00:00:00:02
  3 : 00:00:00:00:00:00:00:03
  4 : 00:00:00:00:00:00:00:04
</pre></dd></dl>

Next, ensure that all the links are up by running the following command:
 fvctl -f /dev/null list-links
You should see an output like this:
<dl><dd><pre>
mininet@mininet:~$ fvctl -f /dev/null list-links
[
  {
    "dstDPID": "00:00:00:00:00:00:00:01", 
    "dstPort": "1", 
    "srcDPID": "00:00:00:00:00:00:00:02", 
    "srcPort": "1"
  }, 
  {
    "dstDPID": "00:00:00:00:00:00:00:02", 
    "dstPort": "1", 
    "srcDPID": "00:00:00:00:00:00:00:01", 
    "srcPort": "1"
  }, 
  {
    "dstDPID": "00:00:00:00:00:00:00:04", 
    "dstPort": "1", 
    "srcDPID": "00:00:00:00:00:00:00:02", 
    "srcPort": "2"
  }, 
  {
    "dstDPID": "00:00:00:00:00:00:00:03", 
    "dstPort": "2", 
    "srcDPID": "00:00:00:00:00:00:00:04", 
    "srcPort": "2"
  }, 
  {
    "dstDPID": "00:00:00:00:00:00:00:01", 
    "dstPort": "2", 
    "srcDPID": "00:00:00:00:00:00:00:03", 
    "srcPort": "1"
  }, 
  {
    "dstDPID": "00:00:00:00:00:00:00:04", 
    "dstPort": "2", 
    "srcDPID": "00:00:00:00:00:00:00:03", 
    "srcPort": "2"
  }, 
  {
    "dstDPID": "00:00:00:00:00:00:00:02", 
    "dstPort": "2", 
    "srcDPID": "00:00:00:00:00:00:00:04", 
    "srcPort": "1"
  }, 
  {
    "dstDPID": "00:00:00:00:00:00:00:03", 
    "dstPort": "1", 
    "srcDPID": "00:00:00:00:00:00:00:01", 
    "srcPort": "2"
  }
]
</pre></dd></dl>


==Slicing Exercise==

===Part1: Simple Topology-based Slicing===
FlowVisor can slice a network in many ways. Here, we are going to explore the simplest way--slicing by switch ports. An example use case is a WAN provider who wants to slice her network to provide dedicated links to each of her tenants. In this part, we will create two physical slices of our WAN, and name them upper and lower as shown in the figure below.

[[images/flowvisor_part1.png]]

====Creating Slices====
Each slice will be managed by a separate controller which will control all the traffic in its slice. A slice is created using the command:
 fvctl add-slice [options] <slicename> <controller-url> <admin-email>
The controller url is of the form <tt>tcp:hostname:port</tt>. The admin email is used for administrative purposes if there is a problem with the slice. You can learn more about the command by typing:
 fvctl add-slice -h

Now, create a slice named <tt>upper</tt> connecting to a controller listening on <tt>tcp:localhost:10001</tt> by running the following command:
 fvctl -f /dev/null add-slice upper tcp:localhost:10001 admin@upperslice
Leave the Slice password empty by hitting Enter when prompted.

Similarly, create a slice named <tt>lower</tt> connecting to a controller listening on <tt>tcp:localhost:10002</tt>.
 fvctl -f /dev/null add-slice lower tcp:localhost:10002 admin@lowerslice
Leave the Slice password empty by hitting Enter when prompted.

Ensure that the slices were added by running the following command:
 fvctl -f /dev/null list-slices
You should now see both the <tt>upper</tt> and <tt>lower</tt> slices in addition to the default <tt>fvadmin</tt> slice, all enabled.

====Creating FlowSpaces====

FlowSpaces associate packets of a particular type in the network to specific slices. You can create flowspaces using the following command:
 fvctl add-flowspace [options] <flowspace-name> <dpid> <priority> <match> <slice-perm>

* When a packet matches multiple flowspaces, FlowVisor assigns it to the flowspace of the highest <tt>priority</tt>.
* <tt>match</tt> describes a flow or flows. Such flow descriptions comprise a series field=value assignments, separated by commas.
* <tt>slice-perm</tt> is  a  comma  separated  list  of  slices that have control over a specific FlowSpace.  <tt>slice-perm</tt> is of the form "slicename1=perm[slicename2=perm[...]]". Each slice can have three types of permissions over a flowspace: DELEGATE, READ, and WRITE.  Permissions are a  bitmask  specified as an integer, with DELEGATE=1, READ=2, WRITE=4.

You can learn more about the command by typing:
 fvctl add-flowspace -h

Now, create a flowspace named <tt>dpid1-port1</tt> (with priority value 1) that maps all the traffic on port 1 of switch s1 to the upper slice by running the following command:
 fvctl -f /dev/null add-flowspace dpid1-port1 1 1 in_port=1 upper=7
Here we gave the upper slice all permissions: DELEGATE, READ, and WRITE.

Similarly, create a flowspace named <tt>dpid1-port3</tt> that maps all the traffic on port 3 of switch s1 to the upper slice:
 fvctl -f /dev/null add-flowspace dpid1-port3 1 1 in_port=3 upper=7

We can create a flowspace for all the traffic at a switch by using the match value of <tt>any</tt>. Use that technique to add switch s2 to the upper slice:
 fvctl -f /dev/null add-flowspace dpid2 2 1 any upper=7

Now, create flowspaces to add ports 1 and 3 of switch s4 to the upper slice:
 fvctl -f /dev/null add-flowspace dpid4-port1 4 1 in_port=1 upper=7
 fvctl -f /dev/null add-flowspace dpid4-port3 4 1 in_port=3 upper=7

Ensure that the flowspaces are correctly added:
 fvctl -f /dev/null list-flowspace
You should see all the flowspaces (5 in all) that you just added.

Now, create flowspaces for the lower slice:
 fvctl -f /dev/null add-flowspace dpid1-port2 1 1 in_port=2 lower=7
 fvctl -f /dev/null add-flowspace dpid1-port4 1 1 in_port=4 lower=7
 fvctl -f /dev/null add-flowspace dpid3 3 1 any lower=7
 fvctl -f /dev/null add-flowspace dpid4-port2 4 1 in_port=2 lower=7
 fvctl -f /dev/null add-flowspace dpid4-port4 4 1 in_port=4 lower=7

Ensure that the flowspaces are correctly added:
 fvctl -f /dev/null list-flowspace

Connect both slices to two different instances of the FVExercise controller app, in two different windows.
 TODO

After a short delay, both controllers should connect. Verify that h1 can ping h3 but not h2 and h4 (and vice versa). In the mininet console run the following commands:
 h1 ping -c1 h3
 h1 ping -c1 -W1 h2
 h1 ping -c1 -W1 h4

Verify that h2 can ping h4 but not h1 and h3 (and vice versa). In the mininet console run the following commands:
 h2 ping -c1 h4
 h2 ping -c1 -W1 h1
 h2 ping -c1 -W1 h3

====Quiz=====
* Could you have implemented this kind of slicing in a traditional network?
** Answer: Yes, VLAN!


===Part2: Advanced Flowspace Slicing===

[[images/flowvisor_part2.png]]

